{
    "docs": [
        {
            "location": "/index.html", 
            "text": "Some general info about MPS", 
            "title": "Main Page"
        }, 
        {
            "location": "/index.html#some-general-info-about-mps", 
            "text": "", 
            "title": "Some general info about MPS"
        }, 
        {
            "location": "/android/index.html", 
            "text": "Prerequisites\n\n\n\n\nRunning Android Studio 1.0 or higher\n\n\nDeveloping for Android API level 19 or higher\n\n\n\n\n\n    \nDownload MPS SDK Examples\n    \n\n\n\n\n\nIn order to complete the Get Started guide, you need to have Android Studio installed on your development machine. If you don't already have it, see the Android Studio site for instructions on how to download everything you need to get up and running.\n\n\n1. Create a new project\n\n\nIn this step, you create a brand new project in Android Studio to use for our example. If you don't already have Studio running, go ahead and open it now.\n\n\n1.1 Start the new project wizard\n\n\n\n\nIf you see the above welcome screen, select Start a new Android Studio project. Otherwise, select File \n New Project from the menu.\n\n\n1.2 Name your project\n\n\n\n\nGive your project the desired Product Name. For the purposes of this example we will call it ReferenceTestApp.\nEnter your Organization Name and Identifier.\n\n\n1.3 Set the required SDK version\n\n\n\n\nOn the next screen, select \nPhone and Tablet\n for the form factor and a minimum SDK version of 19. That's the minimum version supported by the MPS SDK.\n\n\n1.4 Add your main activity\n\n\n\n\nWe're keeping it simple for this example, so on this screen select \nEmpty Activity\n.\n\n\n1.5 Name your activity\n\n\n\n\nOn this screen you have the option of choosing names for the app's activity and its related resources. Use the default names for this example, and just click the \nFinish\n button.\n\n\n1.6 Add SDK to Your Project\n\n\nCopy \nmps-sdk-${VERSION}.aar\n and \nNBM-moat-mobile-app-kit-2.4.1.aar\n files to your libs folder and add the following code to your project\u2019s \nbuild.gradle\n file:\n\n\nallprojects {\n    repositories {\n        jcenter()\n        flatDir {\n            dirs 'libs'\n        }\n    }\n}\n\n\n\n\nAdd the following line to your \ndependencies\n section in your app's \nbuild.gradle\n file:\n\n\ndependencies {\n    ...\n    implementation(name:'mps-sdk-${VERSION}', ext:'aar')\n    implementation(name:'NBM-moat-mobile-app-kit-2.4.1', ext:'aar')\n    ...\n}\n\n\n\n\nThen add the following dependency which is used by SDK:\n\n\ndependencies {\n    ...\n    implementation \ncom.google.android.gms:play-services-ads:11.8.0\n\n    implementation \ncom.google.android.gms:play-services-base:11.8.0\n\n    ...\n}\n\n\n\n\nNote: If you see a message about updating the Google Mobile Ads SDK, please contact the MPS SDK Support team prior to updating:\n\n\n\n\nEmail: \nmps-sdk-support@nbcuni.com\n\n\nDPIM Slack channel: \n#mps_sdk_support\n\n\n\n\n\n#download > a\n{\n    background-color: #2980b9;\n    color: #fff;\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,.26);  \n    border: 0;\n    border-radius: 2px;\n    cursor: pointer;\n    display: inline-block;\n    height: 44px;\n    margin: 0;\n    min-width: 36px;\n    outline: 0;\n    padding: 8px;\n    padding-left: 16px;\n    padding-right: 16px;\n    vertical-align: middle;\n    text-align: center;\n    vertical-align: middle;\n}", 
            "title": "Project Setup"
        }, 
        {
            "location": "/android/index.html#prerequisites", 
            "text": "Running Android Studio 1.0 or higher  Developing for Android API level 19 or higher   \n     Download MPS SDK Examples\n       In order to complete the Get Started guide, you need to have Android Studio installed on your development machine. If you don't already have it, see the Android Studio site for instructions on how to download everything you need to get up and running.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/android/index.html#1-create-a-new-project", 
            "text": "In this step, you create a brand new project in Android Studio to use for our example. If you don't already have Studio running, go ahead and open it now.", 
            "title": "1. Create a new project"
        }, 
        {
            "location": "/android/index.html#11-start-the-new-project-wizard", 
            "text": "If you see the above welcome screen, select Start a new Android Studio project. Otherwise, select File   New Project from the menu.", 
            "title": "1.1 Start the new project wizard"
        }, 
        {
            "location": "/android/index.html#12-name-your-project", 
            "text": "Give your project the desired Product Name. For the purposes of this example we will call it ReferenceTestApp.\nEnter your Organization Name and Identifier.", 
            "title": "1.2 Name your project"
        }, 
        {
            "location": "/android/index.html#13-set-the-required-sdk-version", 
            "text": "On the next screen, select  Phone and Tablet  for the form factor and a minimum SDK version of 19. That's the minimum version supported by the MPS SDK.", 
            "title": "1.3 Set the required SDK version"
        }, 
        {
            "location": "/android/index.html#14-add-your-main-activity", 
            "text": "We're keeping it simple for this example, so on this screen select  Empty Activity .", 
            "title": "1.4 Add your main activity"
        }, 
        {
            "location": "/android/index.html#15-name-your-activity", 
            "text": "On this screen you have the option of choosing names for the app's activity and its related resources. Use the default names for this example, and just click the  Finish  button.", 
            "title": "1.5 Name your activity"
        }, 
        {
            "location": "/android/index.html#16-add-sdk-to-your-project", 
            "text": "Copy  mps-sdk-${VERSION}.aar  and  NBM-moat-mobile-app-kit-2.4.1.aar  files to your libs folder and add the following code to your project\u2019s  build.gradle  file:  allprojects {\n    repositories {\n        jcenter()\n        flatDir {\n            dirs 'libs'\n        }\n    }\n}  Add the following line to your  dependencies  section in your app's  build.gradle  file:  dependencies {\n    ...\n    implementation(name:'mps-sdk-${VERSION}', ext:'aar')\n    implementation(name:'NBM-moat-mobile-app-kit-2.4.1', ext:'aar')\n    ...\n}  Then add the following dependency which is used by SDK:  dependencies {\n    ...\n    implementation  com.google.android.gms:play-services-ads:11.8.0 \n    implementation  com.google.android.gms:play-services-base:11.8.0 \n    ...\n}  Note: If you see a message about updating the Google Mobile Ads SDK, please contact the MPS SDK Support team prior to updating:   Email:  mps-sdk-support@nbcuni.com  DPIM Slack channel:  #mps_sdk_support   \n#download > a\n{\n    background-color: #2980b9;\n    color: #fff;\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,.26);  \n    border: 0;\n    border-radius: 2px;\n    cursor: pointer;\n    display: inline-block;\n    height: 44px;\n    margin: 0;\n    min-width: 36px;\n    outline: 0;\n    padding: 8px;\n    padding-left: 16px;\n    padding-right: 16px;\n    vertical-align: middle;\n    text-align: center;\n    vertical-align: middle;\n}", 
            "title": "1.6 Add SDK to Your Project"
        }, 
        {
            "location": "/android/2_sdk_init/index.html", 
            "text": "Initiate the SDK\n\n\nYou can now create an instance of MPS with the appropriate host URL and site by initializing the library. You can also specify the log level for this instance. Refer to MPSSDKLogLevel in the documentation for more details.\n\n\nBefore start using the SDK it should be created with the following method call. Non-null instance of context should be passed to initialize cache folders in app internal folder.\n\n\nYou can also set test mode. When this mode is set to true all MPS requests will pass additional field to indicate the test mode is activated.\n\n\nURL mpsUrl;\ntry {\n    mpsUrl = new URL(\nhttps://mps.nbcuni.com\n);\n} catch (MalformedURLException e) {\n    Log.e(LOG_TAG, e.getLocalizedMessage(), e);\n    return;\n}\n\nfinal MPSOptions options = new MPSOptions();\noptions.logLevel = MPSSDKLogLevel.DEBUG;\noptions.testMode = false;\nfinal MPS mps = MPS.init(applicationInstance, mpsUrl, \ntest-sdk\n, options);\n\n\n\n\nThe last parameter can be one of the @MPSSDKLogLevel.LogLevel and defines the number of logs which will be printed by the SDK\n\n\nRequest an MPSPage Object\n\n\nThe MPS library operates with the concept of an MPSPage, which is similar to one web page. You will use this MPSPage object to request ads.\n\n\nTo achieve this we create an instance of MPSPageParameters which facilitates building the request that will be sent to MPS. The list of all configurable properties are presented in the library documentation.\n\n\nFor example:\n\n\nfinal MPSPageParameters mpp = new MPSPageParameters(this, \nsome_path\n)\n    .setCat(\nsomeCatValue\n)\n    .addCag(\nsomeKey\n, \nvalue\n);\nfinal MpsPage page = mps.requestPageObject(mpp);\n\n\n\n\nNext we will work on requesting banner and interstital ads, and adding them to the view hierarchy.", 
            "title": "SDK Initialization"
        }, 
        {
            "location": "/android/2_sdk_init/index.html#initiate-the-sdk", 
            "text": "You can now create an instance of MPS with the appropriate host URL and site by initializing the library. You can also specify the log level for this instance. Refer to MPSSDKLogLevel in the documentation for more details.  Before start using the SDK it should be created with the following method call. Non-null instance of context should be passed to initialize cache folders in app internal folder.  You can also set test mode. When this mode is set to true all MPS requests will pass additional field to indicate the test mode is activated.  URL mpsUrl;\ntry {\n    mpsUrl = new URL( https://mps.nbcuni.com );\n} catch (MalformedURLException e) {\n    Log.e(LOG_TAG, e.getLocalizedMessage(), e);\n    return;\n}\n\nfinal MPSOptions options = new MPSOptions();\noptions.logLevel = MPSSDKLogLevel.DEBUG;\noptions.testMode = false;\nfinal MPS mps = MPS.init(applicationInstance, mpsUrl,  test-sdk , options);  The last parameter can be one of the @MPSSDKLogLevel.LogLevel and defines the number of logs which will be printed by the SDK", 
            "title": "Initiate the SDK"
        }, 
        {
            "location": "/android/2_sdk_init/index.html#request-an-mpspage-object", 
            "text": "The MPS library operates with the concept of an MPSPage, which is similar to one web page. You will use this MPSPage object to request ads.  To achieve this we create an instance of MPSPageParameters which facilitates building the request that will be sent to MPS. The list of all configurable properties are presented in the library documentation.  For example:  final MPSPageParameters mpp = new MPSPageParameters(this,  some_path )\n    .setCat( someCatValue )\n    .addCag( someKey ,  value );\nfinal MpsPage page = mps.requestPageObject(mpp);  Next we will work on requesting banner and interstital ads, and adding them to the view hierarchy.", 
            "title": "Request an MPSPage Object"
        }, 
        {
            "location": "/android/3_request_banner_programmatically/index.html", 
            "text": "In addition to requesting banner ads added via xml, you can also request a banner ad and add it to the view hierarchy programatically.\n\n\nLet's use simple \nFrameLayout\n as a container for a banner ad you wish to load. This \nFrameLayout\n can be described in xml file like this:\n\n\nFrameLayout android:id=\n@+id/frame\n\n    android:layout_width=\nmatch_parent\n\n    android:layout_height=\nwrap_content\n/\n\n\n\n\n\nAdd the following code to your java class corresponding this xml layout:\n\n\nFrameLayout container = (FrameLayout) findViewById(R.id.frame);\npage.getBannerAd(\ntestbanner\n, container, new MpsAdListener() {\n\n    @Override\n    public void onAdFailedToLoad(@NonNull MPSError mpsError) {\n        super.onAdFailedToLoad(mpsError);\n    }\n\n});\n\n\n\n\nAlso you can pass additional ad targeting as second parameter to \ngetBannerAd\n function:\n\n\nFrameLayout container = (FrameLayout) findViewById(R.id.frame);\nMap\nString, String\n additionalTargeting = new HashMap\n();\nadditionalTargeting.put(\nkey\n, \nvalue\n);\npage.getBannerAd(\ntestbanner\n, additionalTargeting, container, new MpsAdListener() {\n\n    @Override\n    public void onAdFailedToLoad(@NonNull MPSError mpsError) {\n        super.onAdFailedToLoad(mpsError);\n    }\n\n});\n\n\n\n\nResult\n\n\nCongratulations, you\u2019ve successfully made your banner ad request programatically!", 
            "title": "Request Banner Programmatically"
        }, 
        {
            "location": "/android/3_request_banner_programmatically/index.html#result", 
            "text": "Congratulations, you\u2019ve successfully made your banner ad request programatically!", 
            "title": "Result"
        }, 
        {
            "location": "/android/4_banner_xml/index.html", 
            "text": "The second way to display banner ad is to add its view to your view hierarchy. To do this just add MpsBannerAdView to your xml layout file in a way like this:\n\n\ncom.nbcuni.mps.MPSBannerAdView\n        android:id=\n@+id/mps_ad\n\n        android:layout_width=\nmatch_parent\n\n        android:layout_height=\nwrap_content\n/\n\n\n\n\n\nInstantiate an object of this view in a way of your app using standard \nfindViewById\n, \nbutterknife\n, \ndatabinding\n or anything else. For example:\n\n\nMPSBannerAdView mpsAdView = findViewById(R.id.mps_ad);\n\n\n\n\nAfter you have an object of the view just add the following code to load an ad into the banner view:\n\n\nmpsAdView.displayBannerAd(\ntestbox\n, page, new MPSBannerAdListener() {\n    @Override\n    public void onAdLoaded(@NonNull MPSBannerAdView bannerAdView) {\n        super.onAdLoaded(bannerAdView);\n    }\n});\n\n\n\n\nAlso you can pass additional ad targeting as third parameter to \ndisplayBannerAd\n function:\n\n\nMap\nString, String\n additionalTargeting = new HashMap\n();\nadditionalTargeting.put(\nkey\n, \nvalue\n);\nmpsBannerAdView.displayBannerAd(\ntestbox\n, page, additionalTargeting, new MPSBannerAdListener() {\n    @Override\n    public void onAdLoaded(@NonNull MPSBannerAdView bannerAdView) {\n        super.onAdLoaded(bannerAdView);\n    }\n});\n\n\n\n\nResult\n\n\nThis image shows the displayed banner ad.", 
            "title": "Request Banner with XML"
        }, 
        {
            "location": "/android/4_banner_xml/index.html#result", 
            "text": "This image shows the displayed banner ad.", 
            "title": "Result"
        }, 
        {
            "location": "/android/5_interstitial/index.html", 
            "text": "You can also display interstitial ads to your MPSPage, very similarly to the way you added a banner ad.\n\n\nYou will continue expanding the MPSPage instance that you created earlier. To request an interstitial ad we add the following code to the java file.\n\n\npage.getInterstitialAd(\ntestinterstitial\n, context, new MPSInterstitialAdListener() {\n    @Override\n    public void onAdLoaded(@NonNull MPSInterstitialAd mpsInterstitialAd) {\n        super.onAdLoaded(mpsInterstitialAd);\n        interstitialAd = mpsInterstitialAd;\n        mpsInterstitialAd.present();\n    }\n});\n\n\n\n\nAlso you can pass additional ad targeting as second parameter to \ngetInterstitialAd\n function:\n\n\nMap\nString, String\n additionalTargeting = new HashMap\n();\nadditionalTargeting.put(\nkey\n, \nvalue\n);\npage.getInterstitialAd(\ntestinterstitial\n, additionalTargeting, context, new MPSInterstitialAdListener() {\n    @Override\n    public void onAdLoaded(@NonNull MPSInterstitialAd mpsInterstitialAd) {\n        super.onAdLoaded(mpsInterstitialAd);\n        interstitialAd = mpsInterstitialAd;\n        mpsInterstitialAd.present();\n    }\n});\n\n\n\n\nBuild and run the application.\n\n\nResult\n\n\nThis image shows the displayed banner ad.", 
            "title": "Request Interstitial Ad"
        }, 
        {
            "location": "/android/5_interstitial/index.html#result", 
            "text": "This image shows the displayed banner ad.", 
            "title": "Result"
        }, 
        {
            "location": "/android/6_test_app/index.html", 
            "text": "Test App Installation\n\n\nYou can install the TestApp using the HockeyApp application.\n\n\nHockeyApp test application\n\n\nHow to install test app from HockeyApp\n\n\nAfter you logged in the HockeyApp you will see the apps.\n\n\n\n\nClick on \u2018Install\u2019\n\n\n\n\nTestApp Usage\n\n\nYou can use the MPS SDK TestApp to confirm that the SDK is operating correctly. This can be useful for verifying the functionality of your mobile app.\n\n\nMain page\n\n\nSet your parameters for the ads you want to view in the TestApp.\n\n\nTap the \nMake MPS Request\n button to initialize the session.\n\n\nTap the \nDisplay Banner Ad\n button and \nDisplay Interstitial Ad\n button to view the ads that match your test parameters.\n\n\nSandbox page\n\n\nTap the \nScreens\n button for the ad you want to review.\n\n\nUse the \nInterstitial\n toggle to display interstitial ads instead of banner ads.\n\n\nTap the \nOpen Web View\n button to view the ad in a web view.\n\n\nSettings page\n\n\nThe \nMPS Site Configurations\n section displays the configuration values that were defined in MPS.\n\n\nThe \nSDK Versions\n section displays the MPS SDK version and the Google Mobile Ad SDK version that are built into this version of the TestApp.", 
            "title": "Test App & Installation"
        }, 
        {
            "location": "/android/6_test_app/index.html#test-app-installation", 
            "text": "You can install the TestApp using the HockeyApp application.", 
            "title": "Test App Installation"
        }, 
        {
            "location": "/android/6_test_app/index.html#hockeyapp-test-application", 
            "text": "", 
            "title": "HockeyApp test application"
        }, 
        {
            "location": "/android/6_test_app/index.html#how-to-install-test-app-from-hockeyapp", 
            "text": "After you logged in the HockeyApp you will see the apps.   Click on \u2018Install\u2019", 
            "title": "How to install test app from HockeyApp"
        }, 
        {
            "location": "/android/6_test_app/index.html#testapp-usage", 
            "text": "You can use the MPS SDK TestApp to confirm that the SDK is operating correctly. This can be useful for verifying the functionality of your mobile app.", 
            "title": "TestApp Usage"
        }, 
        {
            "location": "/android/6_test_app/index.html#main-page", 
            "text": "Set your parameters for the ads you want to view in the TestApp.  Tap the  Make MPS Request  button to initialize the session.  Tap the  Display Banner Ad  button and  Display Interstitial Ad  button to view the ads that match your test parameters.", 
            "title": "Main page"
        }, 
        {
            "location": "/android/6_test_app/index.html#sandbox-page", 
            "text": "Tap the  Screens  button for the ad you want to review.  Use the  Interstitial  toggle to display interstitial ads instead of banner ads.  Tap the  Open Web View  button to view the ad in a web view.", 
            "title": "Sandbox page"
        }, 
        {
            "location": "/android/6_test_app/index.html#settings-page", 
            "text": "The  MPS Site Configurations  section displays the configuration values that were defined in MPS.  The  SDK Versions  section displays the MPS SDK version and the Google Mobile Ad SDK version that are built into this version of the TestApp.", 
            "title": "Settings page"
        }, 
        {
            "location": "/android/javadocs/index.html", 
            "text": "Javadocs\n\n\nJavadocs", 
            "title": "Javadoc"
        }, 
        {
            "location": "/android/javadocs/index.html#javadocs", 
            "text": "Javadocs", 
            "title": "Javadocs"
        }, 
        {
            "location": "/ios/1 Project setup/index.html", 
            "text": "Project Setup\n\n\nPrerequisites\n\n\n\n\nXcode 8 or higher\n\n\nDeployment target of 8.0 or higher\n\n\n\n\n\n    \nDownload MPS SDK Examples\n    \n\n\n\n\n\nCocoaPods\n\n\n1.1 Install Cocoapods\n\n\nCocoaPods is a dependency manager for Swift and Objective-C Cocoa projects.\n\n\nCocoaPods is built with Ruby and is installable with the default Ruby available on OS X. We recommend you use the default ruby.\nUsing the default Ruby install can require you to use sudo when installing gems. \n\n\nsudo gem install cocoapods\n\n\n\n\n1.2 Add MPS SDK as a dependency and Install it\n\n\nList the dependencies in a text file named Podfile in your Xcode project directory:\n\n\nplatform :ios, '8.0'\n\ntarget 'YOUR_PROJECT_TARGET' do \n    use_frameworks!\n\n    pod \nnbcu_mps_ios_sdk\n, :git =\n 'https://github.com/NBCUOTS/mobile_mps_sdk_ios_examples.git', :tag =\n 'release-2.0.0'\nend\n\n\n\n\nThen install all your dependencies.\n\n\npod install\n\n\n\n\nYou should have access to \"https://github.com/NBCUOTS/mobile_mps_sdk_ios_examples.git\" repository.\n\n\n1.3 Update App Transport Security in iOS 9\n\n\nGoogle Mobile Ads SDK requires adding the \nNSAllowsArbitraryLoads\n exception to make sure your ads are not impacted by App Transport Security (ATS) on iOS 9 devices. \n\nFor iOS 10 devices, \nNSAllowsArbitraryLoadsForMedia\n and \nNSAllowsArbitraryLoadsInWebContent\n are required to make sure your ads are not impacted by ATS.\n\n\nAdd these values to the \ninfo.plist\n file of your application. \n\n\nkey\nNSAppTransportSecurity\n/key\n\n\ndict\n\n    \nkey\nNSAllowsArbitraryLoads\n/key\n\n    \ntrue/\n\n\n/dict\n\n\n\n\n\nReference: \nGoogle ATS details\n. \n\n\n1.4 Update Simulator Scheme Environment Variables (optional)\n\n\nIf you want to disable system log messages, you can optionally add \nOS_ACTIVITY_MODE=disable\n to the \nEnvironment Variables\n under \nArguments\n of the scheme.\n\n\n\n\n1.5 If case of CocoaPods compilcation issues\n\n\nMake sure you are using cocoapods \n= \"1.3.1\".\n\n\nAnd make sure Swift Version of the pod was successully set\n\n\n\n1.6 Google SDK Updates\n\n\nIf you see a message about updating the Google Mobile Ads SDK, please contact the MPS SDK Support team prior to updating.\n\nEmail: \n, DPIM Slack channel:  #mps_sdk_support\n\n\n\n#download > a\n{\n    background-color: #039be5;\n    color: #fff;\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,.26);  \n    border: 0;\n    border-radius: 2px;\n    cursor: pointer;\n    display: inline-block;\n    height: 44px;\n    margin: 0;\n    min-width: 36px;\n    outline: 0;\n    padding: 8px;\n    padding-left: 16px;\n    padding-right: 16px;\n    vertical-align: middle;\n    text-align: center;\n    vertical-align: middle;\n}", 
            "title": "Project Setup"
        }, 
        {
            "location": "/ios/1 Project setup/index.html#project-setup", 
            "text": "", 
            "title": "Project Setup"
        }, 
        {
            "location": "/ios/1 Project setup/index.html#prerequisites", 
            "text": "Xcode 8 or higher  Deployment target of 8.0 or higher   \n     Download MPS SDK Examples", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/ios/1 Project setup/index.html#cocoapods", 
            "text": "", 
            "title": "CocoaPods"
        }, 
        {
            "location": "/ios/1 Project setup/index.html#11-install-cocoapods", 
            "text": "CocoaPods is a dependency manager for Swift and Objective-C Cocoa projects.  CocoaPods is built with Ruby and is installable with the default Ruby available on OS X. We recommend you use the default ruby.\nUsing the default Ruby install can require you to use sudo when installing gems.   sudo gem install cocoapods", 
            "title": "1.1 Install Cocoapods"
        }, 
        {
            "location": "/ios/1 Project setup/index.html#12-add-mps-sdk-as-a-dependency-and-install-it", 
            "text": "List the dependencies in a text file named Podfile in your Xcode project directory:  platform :ios, '8.0'\n\ntarget 'YOUR_PROJECT_TARGET' do \n    use_frameworks!\n\n    pod  nbcu_mps_ios_sdk , :git =  'https://github.com/NBCUOTS/mobile_mps_sdk_ios_examples.git', :tag =  'release-2.0.0'\nend  Then install all your dependencies.  pod install  You should have access to \"https://github.com/NBCUOTS/mobile_mps_sdk_ios_examples.git\" repository.", 
            "title": "1.2 Add MPS SDK as a dependency and Install it"
        }, 
        {
            "location": "/ios/1 Project setup/index.html#13-update-app-transport-security-in-ios-9", 
            "text": "Google Mobile Ads SDK requires adding the  NSAllowsArbitraryLoads  exception to make sure your ads are not impacted by App Transport Security (ATS) on iOS 9 devices.  \nFor iOS 10 devices,  NSAllowsArbitraryLoadsForMedia  and  NSAllowsArbitraryLoadsInWebContent  are required to make sure your ads are not impacted by ATS.  Add these values to the  info.plist  file of your application.   key NSAppTransportSecurity /key  dict \n     key NSAllowsArbitraryLoads /key \n     true/  /dict   Reference:  Google ATS details .", 
            "title": "1.3 Update App Transport Security in iOS 9"
        }, 
        {
            "location": "/ios/1 Project setup/index.html#14-update-simulator-scheme-environment-variables-optional", 
            "text": "If you want to disable system log messages, you can optionally add  OS_ACTIVITY_MODE=disable  to the  Environment Variables  under  Arguments  of the scheme.", 
            "title": "1.4 Update Simulator Scheme Environment Variables (optional)"
        }, 
        {
            "location": "/ios/1 Project setup/index.html#15-if-case-of-cocoapods-compilcation-issues", 
            "text": "Make sure you are using cocoapods  = \"1.3.1\".  And make sure Swift Version of the pod was successully set", 
            "title": "1.5 If case of CocoaPods compilcation issues"
        }, 
        {
            "location": "/ios/1 Project setup/index.html#16-google-sdk-updates", 
            "text": "If you see a message about updating the Google Mobile Ads SDK, please contact the MPS SDK Support team prior to updating. \nEmail:  , DPIM Slack channel:  #mps_sdk_support  \n#download > a\n{\n    background-color: #039be5;\n    color: #fff;\n    box-shadow: 0 2px 5px 0 rgba(0,0,0,.26);  \n    border: 0;\n    border-radius: 2px;\n    cursor: pointer;\n    display: inline-block;\n    height: 44px;\n    margin: 0;\n    min-width: 36px;\n    outline: 0;\n    padding: 8px;\n    padding-left: 16px;\n    padding-right: 16px;\n    vertical-align: middle;\n    text-align: center;\n    vertical-align: middle;\n}", 
            "title": "1.6 Google SDK Updates"
        }, 
        {
            "location": "/ios/2 SDK Initialization/index.html", 
            "text": "Initialization\n\n\nYou are now ready to create an MPS instance for requesting banner and interstitial ads.  \n\n\nFirst, open your \nViewController.swift\n or \nViewController.m\n files (Swift and Objective-C respectively) and add \nimport nbcu_mps_ios_sdk\n to access the SDK's public API methods.\n\n\nimport nbcu_mps_ios_sdk\n\n\n\n\n@import nbcu_mps_ios_sdk;\n\n\n\n\nYou can now create an instance of MPS with the appropriate host URL and site by initializing the library. You can also specify the log level for this instance. Refer to \nMPSSDKLogLevel\n in the documentation for more details.  \n\n\nAdd the following code in your \nViewController.swift\n file:\n\n\nvar mps: MPS!\noverride func viewDidLoad() {\n    // explicit with base URL\n    let url = URL(string: \nhttps://mps.nbcuni.com\n)!\n    let site = \ntest-sdk\n\n\n    let opt = MPSOptions()\n    opt.logLevel = .debug\n\n    mps = MPS(url: url, site: site, options: opt)\n}\n\n\n\n\nOr, add this code to your \nViewController.m\n file,\n\n\n@interface AppDelegate ()\n{\n    MPS *mps;\n}\n\n- (void)viewDidLoad {\n    // explicit with base URL\n    NSURL *url = [NSURL URLWithString:@\nhttps://mps.nbcuni.com\n];\n    NSString *site = @\ntest-sdk\n;\n\n    MPSOptions *opts = [[MPSOptions alloc] init];\n    opts.logLevel = [MPSSDKLogLevel debug];\n    mps = [[MPS alloc] initWithUrl: url site: site options:opts];\n}\n\n\n\n\nRequest an MPSPage Object\n\n\nThe MPS library operates with the concept of an MPSPage, which is similar to one web page. \nYou will use this MPSPage object to request ads. \n\n\nTo achieve this we create an instance of MPSPageParameters which facilitates building the request that will be sent to MPS. The list of all configurable properties are presented in the library documentation. \n\n\nFor example:\n\n\nvar mps: MPS!\nvar page: MPSPage!\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    let url = URL(string: \nhttps://mps.nbcuni.com\n)!\n    let site = \ntest-sdk\n\n    mps = MPS(url: url, site: site)\n\n    let params = MPSPageParameters(path: \nTEST\n)\n    page = mps.requestPageObject(params: param, rootViewController: self)\n\n\n\n\n@interface ViewController ()\n{    \n    MPS *mps;\n    MPSPage *page;\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    NSURL *url = [NSURL URLWithString:@\nhttps://mps.nbcuni.com\n];\n    NSString *site = @\ntest-sdk\n;\n    mps = [[MPS alloc] initWithUrl:url site:site];\n\n    MPSParameters *params = [[MPSParameters alloc] initWithPath:@\npage\n];\n    page = [mps requestPageObject: param, rootViewController: self];\n\n\n\n\nAt this point you should be ready to build and run your application in your simulator. \n\n\nNext we will work on requesting banner and interstital ads, and adding them to the view hierarchy.", 
            "title": "SDK Initialization"
        }, 
        {
            "location": "/ios/2 SDK Initialization/index.html#initialization", 
            "text": "You are now ready to create an MPS instance for requesting banner and interstitial ads.    First, open your  ViewController.swift  or  ViewController.m  files (Swift and Objective-C respectively) and add  import nbcu_mps_ios_sdk  to access the SDK's public API methods.  import nbcu_mps_ios_sdk  @import nbcu_mps_ios_sdk;  You can now create an instance of MPS with the appropriate host URL and site by initializing the library. You can also specify the log level for this instance. Refer to  MPSSDKLogLevel  in the documentation for more details.    Add the following code in your  ViewController.swift  file:  var mps: MPS!\noverride func viewDidLoad() {\n    // explicit with base URL\n    let url = URL(string:  https://mps.nbcuni.com )!\n    let site =  test-sdk \n\n    let opt = MPSOptions()\n    opt.logLevel = .debug\n\n    mps = MPS(url: url, site: site, options: opt)\n}  Or, add this code to your  ViewController.m  file,  @interface AppDelegate ()\n{\n    MPS *mps;\n}\n\n- (void)viewDidLoad {\n    // explicit with base URL\n    NSURL *url = [NSURL URLWithString:@ https://mps.nbcuni.com ];\n    NSString *site = @ test-sdk ;\n\n    MPSOptions *opts = [[MPSOptions alloc] init];\n    opts.logLevel = [MPSSDKLogLevel debug];\n    mps = [[MPS alloc] initWithUrl: url site: site options:opts];\n}", 
            "title": "Initialization"
        }, 
        {
            "location": "/ios/2 SDK Initialization/index.html#request-an-mpspage-object", 
            "text": "The MPS library operates with the concept of an MPSPage, which is similar to one web page. \nYou will use this MPSPage object to request ads.   To achieve this we create an instance of MPSPageParameters which facilitates building the request that will be sent to MPS. The list of all configurable properties are presented in the library documentation.   For example:  var mps: MPS!\nvar page: MPSPage!\noverride func viewDidLoad() {\n    super.viewDidLoad()\n    let url = URL(string:  https://mps.nbcuni.com )!\n    let site =  test-sdk \n    mps = MPS(url: url, site: site)\n\n    let params = MPSPageParameters(path:  TEST )\n    page = mps.requestPageObject(params: param, rootViewController: self)  @interface ViewController ()\n{    \n    MPS *mps;\n    MPSPage *page;\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    NSURL *url = [NSURL URLWithString:@ https://mps.nbcuni.com ];\n    NSString *site = @ test-sdk ;\n    mps = [[MPS alloc] initWithUrl:url site:site];\n\n    MPSParameters *params = [[MPSParameters alloc] initWithPath:@ page ];\n    page = [mps requestPageObject: param, rootViewController: self];  At this point you should be ready to build and run your application in your simulator.   Next we will work on requesting banner and interstital ads, and adding them to the view hierarchy.", 
            "title": "Request an MPSPage Object"
        }, 
        {
            "location": "/ios/3 Request Banner Programmatically/index.html", 
            "text": "Requesting Banner Ads Programmatically\n\n\nIn addition to requesting banner ads via a storyboard, you can also request a banner ad and add it to the view hierarchy \nprogramatically\n.  \n\n\nBuilding on where you left off from creating a MPS instance and requesting a page object, you can just add the following code to \nViewController.swift\n.\n\n\n    page.getBannerAd(adUnit: \ntestbox\n, rootViewController: self, success: { [weak self] (ad) in\n        if let sSelf = self {\n            sSelf.view.addSubview(ad)\n        }\n    }) { (error) in\n        print(error.localizedDescription)\n    }\n\n\n\n\n\nOr, if you're following along in Objective-C add the following code to \nViewController.m\n.\n\n\n    __weak ViewController *wself = self;\n    NSDictionary *targeting = [NSDictionary dictionaryWithObjectsAndKeys: \ntargetingValue\n, \ntargetingKeys\n, nil];\n    [page getBannerAdWithAdUnit:\ntestbox\n additionalTargeting:targeting rootViewController:self success:^(MPSBannerAdView * _Nonnull adView) {\n        [wself.view addSubview:adView];\n    } failure:^(NSError * _Nonnull error) {\n        NSLog(error);\n    }];\n\n\n\n\n\nBuild and run the application.\n\nYou will see the following result in the simulator. \n\n\nResult\n\n\nCongratulations, you've successfully made your banner ad request programatically!", 
            "title": "Request Banner Programmatically"
        }, 
        {
            "location": "/ios/3 Request Banner Programmatically/index.html#requesting-banner-ads-programmatically", 
            "text": "In addition to requesting banner ads via a storyboard, you can also request a banner ad and add it to the view hierarchy  programatically .    Building on where you left off from creating a MPS instance and requesting a page object, you can just add the following code to  ViewController.swift .      page.getBannerAd(adUnit:  testbox , rootViewController: self, success: { [weak self] (ad) in\n        if let sSelf = self {\n            sSelf.view.addSubview(ad)\n        }\n    }) { (error) in\n        print(error.localizedDescription)\n    }  Or, if you're following along in Objective-C add the following code to  ViewController.m .      __weak ViewController *wself = self;\n    NSDictionary *targeting = [NSDictionary dictionaryWithObjectsAndKeys:  targetingValue ,  targetingKeys , nil];\n    [page getBannerAdWithAdUnit: testbox  additionalTargeting:targeting rootViewController:self success:^(MPSBannerAdView * _Nonnull adView) {\n        [wself.view addSubview:adView];\n    } failure:^(NSError * _Nonnull error) {\n        NSLog(error);\n    }];  Build and run the application. \nYou will see the following result in the simulator.", 
            "title": "Requesting Banner Ads Programmatically"
        }, 
        {
            "location": "/ios/3 Request Banner Programmatically/index.html#result", 
            "text": "Congratulations, you've successfully made your banner ad request programatically!", 
            "title": "Result"
        }, 
        {
            "location": "/ios/4 Request Banner with Storyboard/index.html", 
            "text": "Requesting Banner Ads using a Storyboard\n\n\nNow that you have setup your project with the SDK, let's put banner ads into it.\n\n\nA MPSBannerAdView can be created from a storyboard or from code. Since layouts are generally defined in a storyboard, this guide shows the storyboard method.\n\n\nAdd an MPSBannerAdView in a Storyboard \n\n\nThe MPSBannerAdView needs a reference in code to load ads into it.  \n\n\n\n\nOpen up the Assistant Editor by navigating in Xcode to \nView \n Assistant Editor \n Show Assistant Editor\n. \n\n\nIn the Assistant Editor, make sure the ViewController.h file is showing.\n\nNext, hold the control key, click the MPSBannerAdView and drag your cursor over to \nViewController.h\n. For a Swift project, follow the steps above but add a reference to the MPSBannerAdView in the \nViewController.swift\n file.\n\n\n\n\nXcode will generate and connect a property for you. Name it \"adView\", and click Connect.\n\n\nTo resolve a compilation error, also include \nimport nbcu_mps_ios_sdk\n in \nViewController.swift\n or \nViewController.h\n so the compiler knows that MPSBannerAdView is a valid class.\n\n\nLoad an Ad into MPSBannerAdView\n\n\nFinally, add the following code into \nViewController.swift\n to load an ad into the banner view.\n\n\n override func viewDidLoad() {\n        super.viewDidLoad()\n\n        let params = MPSPageParameters(path: \npage\n)\n        params.cat = \nsomeCatValue\n\n\n        let page = mps.requestPageObject(mpsParams: params)\n        let targeting = [\ntargetingKey\n: \ntargeting-value\n];\n        adView.delegate = self\n        adView.displayBannerAd(adSlot: \ntestbox\n, additionalTargeting: targeting, page: page, rootViewController: self)\n    }\n\n\n\n\nOr, if you're following along in Objective-C add the following code to \nViewController.m\n.\n\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    MPSPageParameters *params = [[MPSPageParameters alloc] initWithPath:@\npage\n];\n    page = [mps requestPageObjectWithMpsParams:params];   \n\n    adView.delegate = self;\n    [adView displayBannerAdWithAdSlot:@\ntestbox\n page:page rootViewController:self];\n}\n\n\n\n\nResult\n\n\nThis image shows the displayed banner ad.", 
            "title": "Request Banner with Storyboard"
        }, 
        {
            "location": "/ios/4 Request Banner with Storyboard/index.html#requesting-banner-ads-using-a-storyboard", 
            "text": "Now that you have setup your project with the SDK, let's put banner ads into it.  A MPSBannerAdView can be created from a storyboard or from code. Since layouts are generally defined in a storyboard, this guide shows the storyboard method.", 
            "title": "Requesting Banner Ads using a Storyboard"
        }, 
        {
            "location": "/ios/4 Request Banner with Storyboard/index.html#add-an-mpsbanneradview-in-a-storyboard", 
            "text": "The MPSBannerAdView needs a reference in code to load ads into it.     Open up the Assistant Editor by navigating in Xcode to  View   Assistant Editor   Show Assistant Editor .   In the Assistant Editor, make sure the ViewController.h file is showing. \nNext, hold the control key, click the MPSBannerAdView and drag your cursor over to  ViewController.h . For a Swift project, follow the steps above but add a reference to the MPSBannerAdView in the  ViewController.swift  file.   Xcode will generate and connect a property for you. Name it \"adView\", and click Connect.  To resolve a compilation error, also include  import nbcu_mps_ios_sdk  in  ViewController.swift  or  ViewController.h  so the compiler knows that MPSBannerAdView is a valid class.", 
            "title": "Add an MPSBannerAdView in a Storyboard "
        }, 
        {
            "location": "/ios/4 Request Banner with Storyboard/index.html#load-an-ad-into-mpsbanneradview", 
            "text": "Finally, add the following code into  ViewController.swift  to load an ad into the banner view.   override func viewDidLoad() {\n        super.viewDidLoad()\n\n        let params = MPSPageParameters(path:  page )\n        params.cat =  someCatValue \n\n        let page = mps.requestPageObject(mpsParams: params)\n        let targeting = [ targetingKey :  targeting-value ];\n        adView.delegate = self\n        adView.displayBannerAd(adSlot:  testbox , additionalTargeting: targeting, page: page, rootViewController: self)\n    }  Or, if you're following along in Objective-C add the following code to  ViewController.m .  - (void)viewDidLoad {\n    [super viewDidLoad];\n\n    MPSPageParameters *params = [[MPSPageParameters alloc] initWithPath:@ page ];\n    page = [mps requestPageObjectWithMpsParams:params];   \n\n    adView.delegate = self;\n    [adView displayBannerAdWithAdSlot:@ testbox  page:page rootViewController:self];\n}", 
            "title": "Load an Ad into MPSBannerAdView"
        }, 
        {
            "location": "/ios/4 Request Banner with Storyboard/index.html#result", 
            "text": "This image shows the displayed banner ad.", 
            "title": "Result"
        }, 
        {
            "location": "/ios/5 Request Interstitial Ad/index.html", 
            "text": "Requesting Interstitial Ads\n\n\nYou can also display interstitial ads to your MPSPage, very similarly to the way you added a banner ad.\n\n\nYou will continue expanding the MPSPage instance that you created earlier. To request an interstitial ad we add the following code to the \nViewController.swift\n file.\n\n\n\n    page.getInterstitialAd(adUnit: \ntestinterstitial\n, success: { [weak self] (inter) in\n        if let sSelf = self {\n            inter.present(fromRootViewController: sSelf)\n        }\n    }) { (error) in\n        print(error.localizedDescription)\n    }\n\n\n\n\nOr, if you're following along in Objective-C add the following to the \nViewController.m file\n. \n\n\n    NSDictionary *targeting = [NSDictionary dictionaryWithObjectsAndKeys: \ntargetingValue\n, \ntargetingKeys\n, nil];\n\n    [page getInterstitialAdWithAdUnit:@\ntestinterstitial\n additionalTargeting:targeting success:^(MPSInterstitialAd * _Nonnull inter) {\n        ViewController *sSelf = wself;\n        if (sSelf) {\n            [inter presentFromRootViewController:sSelf];\n        }\n    } failure:^(NSError * _Nonnull) {\n        NSLog(error);\n    }];\n\n\n\n\nBuild and run the application.\n\nYou will see the following result in the simulator. \n\n\nResult\n\n\nCongratulations, you've successfully made your interstitial ad request programatically!", 
            "title": "Request Interstitial Ad"
        }, 
        {
            "location": "/ios/5 Request Interstitial Ad/index.html#requesting-interstitial-ads", 
            "text": "You can also display interstitial ads to your MPSPage, very similarly to the way you added a banner ad.  You will continue expanding the MPSPage instance that you created earlier. To request an interstitial ad we add the following code to the  ViewController.swift  file.  \n    page.getInterstitialAd(adUnit:  testinterstitial , success: { [weak self] (inter) in\n        if let sSelf = self {\n            inter.present(fromRootViewController: sSelf)\n        }\n    }) { (error) in\n        print(error.localizedDescription)\n    }  Or, if you're following along in Objective-C add the following to the  ViewController.m file .       NSDictionary *targeting = [NSDictionary dictionaryWithObjectsAndKeys:  targetingValue ,  targetingKeys , nil];\n\n    [page getInterstitialAdWithAdUnit:@ testinterstitial  additionalTargeting:targeting success:^(MPSInterstitialAd * _Nonnull inter) {\n        ViewController *sSelf = wself;\n        if (sSelf) {\n            [inter presentFromRootViewController:sSelf];\n        }\n    } failure:^(NSError * _Nonnull) {\n        NSLog(error);\n    }];  Build and run the application. \nYou will see the following result in the simulator.", 
            "title": "Requesting Interstitial Ads"
        }, 
        {
            "location": "/ios/5 Request Interstitial Ad/index.html#result", 
            "text": "Congratulations, you've successfully made your interstitial ad request programatically!", 
            "title": "Result"
        }, 
        {
            "location": "/ios/6 Additional Functionality/index.html", 
            "text": "Additional Functionality\n\n\n1. Get MPS Site Config\n\n\nTo get MPS Site Config JSON, use\n\n\n    mps.getSiteConfig(success: { (config) in\n\n    }) { (error) in\n\n    }\n\n\n\n\n    [mps getSiteConfigWithSuccess:^(NSDictionary\nNSString *,id\n * _Nonnull json) {\n\n    } failure:^(NSError * _Nonnull error) {\n\n    }];\n\n\n\n\nIt returns the MPS Site Config JSON from MPS Server or an error.\n\n\n2. Additional Targeting\n\n\nTo set page level custom targeting, pass the additionalTargeting argument on an ad request with a dictionary of custom targeting information. Additional targeting will be added to the ad targeting parameters from MPS Page JSON. \n\n\nFor Banner Ad:\n\n\n    let customTargeting = [\ntargetingKey\n: \ntargeting-value\n, \ntargetingKey2\n: \ntargeting-value2\n];\n    page.getBannerAd(adUnit: \ntestbox\n, additionalTargeting: customTargeting, rootViewController: self, success: { [weak self] (ad) in\n        if let sSelf = self {\n            sSelf.view.addSubview(ad)\n        }\n    }) { (error) in\n        print(error.localizedDescription)\n    }\n\n\n\n\n    NSDictionary *customTageting = @{@\nkey1\n: @\nvalue1\n};\n    [page getBannerAdWithAdSlot:@\ntestbox\n additionalTargeting:customTageting rootViewController:self success:^(MPSBannerAdView * _Nonnull ad) {\n\n    } failure:^(NSError * _Nonnull error) {\n\n    }];\n\n\n\n\nFor Banner View:\n\n\n    let params = MPSPageParameters(path: \npage\n)\n    params.cat = \nsomeCatValue\n\n\n    let page = mps.requestPageObject(mpsParams: params)\n    let targeting = [\ntargetingKey\n: \ntargeting-value\n]\n    adView.delegate = self\n    adView.displayBannerAd(adSlot: \ntestbox\n, additionalTargeting: targeting, page: page, rootViewController: self)\n\n\n\n\n    NSDictionary *customTageting = @{@\nkey1\n: @\nvalue1\n};\n    [bannerView displayBannerAdWithAdSlot:@\ntestbox\n page:page additionalTargeting:customTageting rootViewController:self];\n\n\n\n\nFor Interstitial:\n\n\n    let targeting = [\ntargetingKey\n: \ntargeting-value\n]\n    page.getInterstitialAd(adUnit: \ntestinterstitial\n, additionalTargeting: targeting, success: { [weak self] (inter) in\n        if let sSelf = self {\n            inter.present(fromRootViewController: sSelf)\n        }\n    }) { (error) in\n        print(error.localizedDescription)\n    }\n\n\n\n\n    NSDictionary *customTageting = @{@\nkey1\n: @\nvalue1\n};\n    [page getInterstitialAdWithAdSlot:@\ntestinterstitial\n additionalTargeting:customTageting success:^(MPSInterstitialAd * _Nonnull inter) {\n\n    } failure:^(NSError * _Nonnull error) {\n\n    }];", 
            "title": "Additional Functionality"
        }, 
        {
            "location": "/ios/6 Additional Functionality/index.html#additional-functionality", 
            "text": "", 
            "title": "Additional Functionality"
        }, 
        {
            "location": "/ios/6 Additional Functionality/index.html#1-get-mps-site-config", 
            "text": "To get MPS Site Config JSON, use      mps.getSiteConfig(success: { (config) in\n\n    }) { (error) in\n\n    }      [mps getSiteConfigWithSuccess:^(NSDictionary NSString *,id  * _Nonnull json) {\n\n    } failure:^(NSError * _Nonnull error) {\n\n    }];  It returns the MPS Site Config JSON from MPS Server or an error.", 
            "title": "1. Get MPS Site Config"
        }, 
        {
            "location": "/ios/6 Additional Functionality/index.html#2-additional-targeting", 
            "text": "To set page level custom targeting, pass the additionalTargeting argument on an ad request with a dictionary of custom targeting information. Additional targeting will be added to the ad targeting parameters from MPS Page JSON.", 
            "title": "2. Additional Targeting"
        }, 
        {
            "location": "/ios/6 Additional Functionality/index.html#for-banner-ad", 
            "text": "let customTargeting = [ targetingKey :  targeting-value ,  targetingKey2 :  targeting-value2 ];\n    page.getBannerAd(adUnit:  testbox , additionalTargeting: customTargeting, rootViewController: self, success: { [weak self] (ad) in\n        if let sSelf = self {\n            sSelf.view.addSubview(ad)\n        }\n    }) { (error) in\n        print(error.localizedDescription)\n    }      NSDictionary *customTageting = @{@ key1 : @ value1 };\n    [page getBannerAdWithAdSlot:@ testbox  additionalTargeting:customTageting rootViewController:self success:^(MPSBannerAdView * _Nonnull ad) {\n\n    } failure:^(NSError * _Nonnull error) {\n\n    }];", 
            "title": "For Banner Ad:"
        }, 
        {
            "location": "/ios/6 Additional Functionality/index.html#for-banner-view", 
            "text": "let params = MPSPageParameters(path:  page )\n    params.cat =  someCatValue \n\n    let page = mps.requestPageObject(mpsParams: params)\n    let targeting = [ targetingKey :  targeting-value ]\n    adView.delegate = self\n    adView.displayBannerAd(adSlot:  testbox , additionalTargeting: targeting, page: page, rootViewController: self)      NSDictionary *customTageting = @{@ key1 : @ value1 };\n    [bannerView displayBannerAdWithAdSlot:@ testbox  page:page additionalTargeting:customTageting rootViewController:self];", 
            "title": "For Banner View:"
        }, 
        {
            "location": "/ios/6 Additional Functionality/index.html#for-interstitial", 
            "text": "let targeting = [ targetingKey :  targeting-value ]\n    page.getInterstitialAd(adUnit:  testinterstitial , additionalTargeting: targeting, success: { [weak self] (inter) in\n        if let sSelf = self {\n            inter.present(fromRootViewController: sSelf)\n        }\n    }) { (error) in\n        print(error.localizedDescription)\n    }      NSDictionary *customTageting = @{@ key1 : @ value1 };\n    [page getInterstitialAdWithAdSlot:@ testinterstitial  additionalTargeting:customTageting success:^(MPSInterstitialAd * _Nonnull inter) {\n\n    } failure:^(NSError * _Nonnull error) {\n\n    }];", 
            "title": "For Interstitial:"
        }, 
        {
            "location": "/ios/7 Test App & Installation/index.html", 
            "text": "MPS SDK Test App\n\n\n6.1 TestApp Installation\n\n\nYou can install the TestApp using the HockeyApp application. \n\n\nHockeyApp test application\n\n\nHow to install test app from HockeyApp\n\n\nAfter you logged in the HockeyApp you will see the apps.\n\n\n\n\nClick on 'Install' \n\n\n\n\nIf you install it first time - you'll see this notification.\n\n\n\n\nTo remove this notification go to 'Settings-\nGeneral'.\nFind 'Profiles \n Device Managament' and click on it.\n\n\n\n\nChoose 'NBCUniversal Media, LLC'.\n\n\n\n\nClick 'Trust'\n\nYou've installed the MPS SDK TestApp.\n\n\n\n\n6.2 TestApp Usage\n\n\nYou can use the MPS SDK \nTestApp\n to confirm that the SDK is operating correctly. This can be useful for verifying the functionality of your mobile app.\n\n\nMain page\n\n\nSet your parameters for the ads you want to view in the TestApp.\n\n\nTap the \nMake MPS Request\n button to initialize the session.\n\n\nTap the \nDisplay Banner Ad\n button and \nDisplay Interstitial Ad\n button to view the ads that match your test parameters.\n\n\nSandbox page\n\n\nTap the \nScreens\n button for the ad you want to review.\n\n\nUse the \nInterstitial\n toggle to display interstitial ads instead of banner ads.\n\n\nTap the \nOpen Web View\n button to view the ad in a web view.\n\n\nSettings page\n\n\nThe \nMPS Site Configurations\n section displays the configuration values that were defined in MPS.\n\n\nThe \nSDK Versions\n  section displays the MPS SDK version and the Google Mobile Ad SDK version that are built into this version of the TestApp.", 
            "title": "Test App & Installation"
        }, 
        {
            "location": "/ios/7 Test App & Installation/index.html#mps-sdk-test-app", 
            "text": "", 
            "title": "MPS SDK Test App"
        }, 
        {
            "location": "/ios/7 Test App & Installation/index.html#61-testapp-installation", 
            "text": "You can install the TestApp using the HockeyApp application.", 
            "title": "6.1 TestApp Installation"
        }, 
        {
            "location": "/ios/7 Test App & Installation/index.html#hockeyapp-test-application", 
            "text": "", 
            "title": "HockeyApp test application"
        }, 
        {
            "location": "/ios/7 Test App & Installation/index.html#how-to-install-test-app-from-hockeyapp", 
            "text": "After you logged in the HockeyApp you will see the apps.   Click on 'Install'    If you install it first time - you'll see this notification.   To remove this notification go to 'Settings- General'.\nFind 'Profiles   Device Managament' and click on it.   Choose 'NBCUniversal Media, LLC'.   Click 'Trust' \nYou've installed the MPS SDK TestApp.", 
            "title": "How to install test app from HockeyApp"
        }, 
        {
            "location": "/ios/7 Test App & Installation/index.html#62-testapp-usage", 
            "text": "You can use the MPS SDK  TestApp  to confirm that the SDK is operating correctly. This can be useful for verifying the functionality of your mobile app.", 
            "title": "6.2 TestApp Usage"
        }, 
        {
            "location": "/ios/7 Test App & Installation/index.html#main-page", 
            "text": "Set your parameters for the ads you want to view in the TestApp.  Tap the  Make MPS Request  button to initialize the session.  Tap the  Display Banner Ad  button and  Display Interstitial Ad  button to view the ads that match your test parameters.", 
            "title": "Main page"
        }, 
        {
            "location": "/ios/7 Test App & Installation/index.html#sandbox-page", 
            "text": "Tap the  Screens  button for the ad you want to review.  Use the  Interstitial  toggle to display interstitial ads instead of banner ads.  Tap the  Open Web View  button to view the ad in a web view.", 
            "title": "Sandbox page"
        }, 
        {
            "location": "/ios/7 Test App & Installation/index.html#settings-page", 
            "text": "The  MPS Site Configurations  section displays the configuration values that were defined in MPS.  The  SDK Versions   section displays the MPS SDK version and the Google Mobile Ad SDK version that are built into this version of the TestApp.", 
            "title": "Settings page"
        }
    ]
}